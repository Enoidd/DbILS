2Ô∏è‚É£ React e Node.js sullo Stesso Server ‚Üí Monolitico

üìå React viene servito direttamente dal backend Node.js, quindi tutto gira su un unico server.
üìå Come funziona?

    Quando l'utente visita il sito, Node.js serve la pagina React come file statico.
    Il backend Node.js ospita sia il frontend che le API.
    üìå Vantaggi:
    Facile da gestire (nessun server separato per il frontend).
    Minore latenza tra frontend e backend.
    üìå Esempio setup:
    Dopo aver creato l‚Äôapp React, compiliamo i file statici e li serviamo con Node.js:

=============================================================

Struttura del Progetto

Il progetto √® organizzato in due parti principali:

    Backend (server):
        Tecnologie: Node.js, Express, MySQL.
        Ruolo: Fornisce le API REST per comunicare con il database MySQL.
        Funzioni principali:
            Connessione al database.
            Fornire dati (es. elenco delle attivit√†) tramite API.
            Servire i file React per la parte frontend.

    Frontend (React):
        Tecnologie: React.js.
        Ruolo: √à l'interfaccia grafica con cui l'utente interagisce.
        Funzioni principali:
            Comunicare con le API del server per recuperare o inviare dati.
            Visualizzare i dati (es. elenco delle attivit√†) all'utente.
            Consentire azioni come creare, aggiornare ed eliminare attivit√†.

1Ô∏è‚É£ Backend con Node.js

Abbiamo configurato un server con Node.js e Express che:

    Si connette a MySQL:
        Utilizziamo la libreria mysql per stabilire una connessione con il database. La configurazione include:
            host: L'indirizzo del server MySQL (es. localhost).
            user: L'utente MySQL (es. root).
            password: La password associata a quell'utente (es. Giordana94!).
            database: Il nome del database (es. gestionedb).

    Espone API REST:
        API /api/attivita (GET): Fornisce l'elenco di tutte le attivit√† nella tabella Attivit√†. Quando un client (come React) fa una richiesta a questa API, il server esegue una query SQL:

    SELECT * FROM Attivit√†;

    E restituisce i risultati in formato JSON.

Serve i file React (Frontend):

    Quando il progetto React viene compilato (con npm run build), i file statici risultanti (HTML, CSS, JavaScript) vengono serviti direttamente dal backend.
    Questo √® gestito con Express e il metodo:

        app.use(express.static(path.join(__dirname, "../frontend/build")));
        app.get("*", (req, res) => {
            res.sendFile(path.join(__dirname, "../frontend/build", "index.html"));
        });

2Ô∏è‚É£ Frontend con React

Abbiamo creato un'applicazione React che:

    Comunica con il backend tramite API:
        Usiamo la libreria axios per inviare richieste HTTP al backend. Ad esempio:

    axios.get("/api/attivita")
        .then(response => setAttivita(response.data));

    Questo recupera i dati delle attivit√† dal backend e li memorizza in uno stato React.

Visualizza i dati (CRUD):

    La lista delle attivit√† viene mostrata con un componente React che cicla sui dati ricevuti dall'API e li rende in una lista:

    <ul>
        {attivita.map(att => (
            <li key={att.ID}>{att.Titolo} - {att.Descrizione}</li>
        ))}
    </ul>

Permette di creare, aggiornare ed eliminare dati (CRUD):

    Creazione: L'utente inserisce titolo e descrizione, e React invia una richiesta POST all'API:

axios.post("/api/attivita", { Titolo: titolo, Descrizione: descrizione });

Eliminazione: L'utente pu√≤ eliminare un'attivit√† cliccando su un bottone, che invia una richiesta DELETE:

        axios.delete(`/api/attivita/${id}`);

Come interagiscono le parti (Flusso dei dati)
Esempio pratico: Visualizzazione dell'elenco attivit√†

    L'utente visita http://localhost:5000.
    Il server Node.js:
        Serve i file React dalla cartella frontend/build.
        React viene caricato nel browser dell'utente.
    React invia una richiesta GET all'API /api/attivita:

axios.get("/api/attivita");

Node.js riceve la richiesta, esegue una query SQL al database MySQL:

    SELECT * FROM Attivit√†;

    MySQL restituisce i dati al server, che li invia a React come risposta JSON.
    React riceve i dati e li visualizza nella pagina web come una lista di attivit√†.

Esempio pratico: Creazione di una nuova attivit√†

    L'utente inserisce i dettagli di un'attivit√† (es. Titolo: "Nuovo Task", Descrizione: "Descrizione del task") e clicca su "Aggiungi".
    React invia una richiesta POST all'API /api/attivita con i dati:

axios.post("/api/attivita", {
    Titolo: "Nuovo Task",
    Descrizione: "Descrizione del task"
});

Node.js riceve i dati e li salva nel database MySQL con una query SQL:

INSERT INTO Attivit√† (Titolo, Descrizione) VALUES ('Nuovo Task', 'Descrizione del task');

Node.js restituisce una risposta di successo a React.
React aggiorna automaticamente la lista delle attivit√† chiamando di nuovo l'API /api/attivita.


=============================================================


1Ô∏è‚É£ Struttura del Progetto

üìÇ gestionedb/
‚îú‚îÄ‚îÄ üìÅ backend/ (Node.js + Express + MySQL)
‚îÇ ‚îú‚îÄ‚îÄ server.js
‚îÇ ‚îú‚îÄ‚îÄ package.json
‚îÇ ‚îú‚îÄ‚îÄ .env
‚îÇ ‚îú‚îÄ‚îÄ üìÅ database/ (Query SQL)
‚îÇ ‚îú‚îÄ‚îÄ üìÅ routes/ (API REST)
‚îú‚îÄ‚îÄ üìÅ frontend/ (React.js)
‚îÇ ‚îú‚îÄ‚îÄ src/ (Componenti React)
‚îÇ ‚îú‚îÄ‚îÄ package.json


2Ô∏è‚É£ Configurazione del Backend (Node.js + Express)
Installa Node.js e crea il server

1Ô∏è‚É£ Apri il terminale e crea il backend:

mkdir gestionedb && cd gestionedb
mkdir backend && cd backend
npm init -y
npm install express mysql cors body-parser dotenv path

2Ô∏è‚É£ Crea un file server.js in backend/ con il codice base:

const express = require("express");
const mysql = require("mysql");
const cors = require("cors");
const path = require("path");
require("dotenv").config();

const app = express();
app.use(cors());
app.use(express.json());

const db = mysql.createConnection({
    host: "localhost",
    user: "root",
    password: "",
    database: "gestionedb",
});

db.connect(err => {
    if (err) throw err;
    console.log("‚úÖ Database connesso!");
});

// API per ottenere tutte le attivit√†
app.get("/api/attivita", (req, res) => {
    db.query("SELECT * FROM Attivit√†", (err, result) => {
        if (err) return res.status(500).send(err);
        res.json(result);
    });
});

// Servire React in produzione
app.use(express.static(path.join(__dirname, "../frontend/build")));

app.get("*", (req, res) => {
    res.sendFile(path.join(__dirname, "../frontend/build", "index.html"));
});

app.listen(5000, () => {
    console.log("üöÄ Server avviato su http://localhost:5000");
});

3Ô∏è‚É£ Avvia il backend:

node server.js

3Ô∏è‚É£ Configurazione del Frontend (React)

1Ô∏è‚É£ Torna alla cartella principale e crea il frontend:

cd ..
npx create-react-app frontend
cd frontend
npm install axios react-router-dom

2Ô∏è‚É£ Crea un file src/pages/Attivita.js in frontend/src/pages/ per visualizzare le attivit√†:

import React, { useEffect, useState } from "react";
import axios from "axios";

const Attivita = () => {
    const [attivita, setAttivita] = useState([]);

    useEffect(() => {
        axios.get("/api/attivita").then(response => {
            setAttivita(response.data);
        });
    }, []);

    return (
        <div>
            <h2>Lista Attivit√†</h2>
            <ul>
                {attivita.map(att => (
                    <li key={att.ID}>{att.Titolo} - {att.Descrizione}</li>
                ))}
            </ul>
        </div>
    );
};

export default Attivita;

3Ô∏è‚É£ Modifica frontend/src/App.js per includere la pagina:

import React from "react";
import { BrowserRouter as Router, Route, Routes } from "react-router-dom";
import Attivita from "./pages/Attivita";

function App() {
    return (
        <Router>
            <Routes>
                <Route path="/" element={<Attivita />} />
            </Routes>
        </Router>
    );
}

export default App;

4Ô∏è‚É£ Compila React e integra nel backend:

cd frontend
npm run build

Ora i file React sono pronti in frontend/build/.

5Ô∏è‚É£ Torna al backend e avvia il server con React incluso:

cd ../backend
node server.js

(SE NON PARTE ANDARE AL PUNTO 1)


‚úÖ React e Node.js girano sullo stesso server.
‚úÖ Non serve configurare hosting separato per il frontend.
‚úÖ Facile da gestire e distribuire su un VPS o un server cloud.


=====

(PUNTO 1)

installazione web-vitals manualmente:

    Apri il terminale nella cartella del progetto frontend e installa la libreria:

npm install web-vitals

Dopo aver installato, riprova a creare la build:

npm run build

=====

(ASSICURARSI CHE NEL FILE ../backend/server.js ci sia user - passwd - nome_database corretti, in caso creare la password e/o database)

sudo mysql -u root -p

mysql> ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'Giordana94!';
Query OK, 0 rows affected (0,02 sec)

FLUSH PRIVILEGES; (per applicare le modifiche)

EXIT;

CREATE DATABASE gestionedb;

=====


4Ô∏è‚É£ Test Finale

Ora puoi aprire il browser e visitare:
üîó http://localhost:5000 ‚Üí Dovresti vedere la lista delle attivit√†.


üìå 1. Miglioriamo il Backend

Apri backend/server.js e aggiorniamolo per gestire il CRUD completo e il login.

1Ô∏è‚É£ Installa i pacchetti necessari

cd backend
npm install bcryptjs jsonwebtoken express-validator

2Ô∏è‚É£ Creiamo la gestione utenti (Login + Registrazione) - NON FATTO

üìå Aggiungi il codice seguente in server.js

const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const { body, validationResult } = require("express-validator");

const SECRET_KEY = "supersegreto"; // Sostituiscilo con una variabile d'ambiente

// Registrazione utente
app.post("/api/register", [
    body("email").isEmail(),
    body("password").isLength({ min: 6 })
], (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) return res.status(400).json({ errors: errors.array() });

    const { email, password } = req.body;
    const hashedPassword = bcrypt.hashSync(password, 10);

    db.query("INSERT INTO utenti (email, password) VALUES (?, ?)", [email, hashedPassword], (err) => {
        if (err) return res.status(500).send(err);
        res.json({ message: "Utente registrato!" });
    });
});

// Login utente
app.post("/api/login", (req, res) => {
    const { email, password } = req.body;

    db.query("SELECT * FROM utenti WHERE email = ?", [email], (err, results) => {
        if (err || results.length === 0) return res.status(401).json({ message: "Utente non trovato!" });

        const user = results[0];
        if (!bcrypt.compareSync(password, user.password)) return res.status(401).json({ message: "Password errata!" });

        const token = jwt.sign({ id: user.ID, email: user.email }, SECRET_KEY, { expiresIn: "1h" });
        res.json({ token });
    });
});

‚úÖ Ora possiamo gestire registrazione e login!
üìå 2. Implementiamo il CRUD Completo

Aggiungiamo API per creare, leggere, aggiornare ed eliminare attivit√†.
1Ô∏è‚É£ CRUD per Attivit√†

Aggiungi queste API in server.js:

// GET - Ottieni tutte le attivit√†
app.get("/api/attivita", (req, res) => {
    db.query("SELECT * FROM Attivit√†", (err, result) => {
        if (err) return res.status(500).send(err);
        res.json(result);
    });
});

// POST - Crea una nuova attivit√†
app.post("/api/attivita", (req, res) => {
    const { Titolo, Descrizione, Responsabile, DataInizio } = req.body;
    db.query(
        "INSERT INTO Attivit√† (Titolo, Descrizione, Responsabile, DataInizio) VALUES (?, ?, ?, ?)",
        [Titolo, Descrizione, Responsabile, DataInizio],
        (err, result) => {
            if (err) return res.status(500).send(err);
            res.json({ message: "Attivit√† creata!", id: result.insertId });
        }
    );
});

// PUT - Aggiorna un'attivit√†
app.put("/api/attivita/:id", (req, res) => {
    const { Titolo, Descrizione, Responsabile, DataInizio } = req.body;
    db.query(
        "UPDATE Attivit√† SET Titolo=?, Descrizione=?, Responsabile=?, DataInizio=? WHERE ID=?",
        [Titolo, Descrizione, Responsabile, DataInizio, req.params.id],
        (err) => {
            if (err) return res.status(500).send(err);
            res.json({ message: "Attivit√† aggiornata!" });
        }
    );
});

// DELETE - Elimina un'attivit√†
app.delete("/api/attivita/:id", (req, res) => {
    db.query("DELETE FROM Attivit√† WHERE ID=?", [req.params.id], (err) => {
        if (err) return res.status(500).send(err);
        res.json({ message: "Attivit√† eliminata!" });
    });
});

‚úÖ Ora possiamo gestire attivit√† da React!
üìå 3. Creiamo il Frontend per CRUD + Login

Apri frontend/src/pages/Attivita.js e aggiorna il codice per creare, modificare ed eliminare attivit√†.

import React, { useEffect, useState } from "react";
import axios from "axios";

const Attivita = () => {
    const [attivita, setAttivita] = useState([]);
    const [titolo, setTitolo] = useState("");
    const [descrizione, setDescrizione] = useState("");

    useEffect(() => {
        fetchAttivita();
    }, []);

    const fetchAttivita = () => {
        axios.get("/api/attivita").then(response => {
            setAttivita(response.data);
        });
    };

    const creaAttivita = () => {
        axios.post("/api/attivita", { Titolo: titolo, Descrizione: descrizione })
            .then(() => {
                fetchAttivita();
                setTitolo("");
                setDescrizione("");
            });
    };

    const eliminaAttivita = (id) => {
        axios.delete(`/api/attivita/${id}`).then(() => fetchAttivita());
    };

    return (
        <div>
            <h2>Lista Attivit√†</h2>
            <input type="text" placeholder="Titolo" value={titolo} onChange={(e) => setTitolo(e.target.value)} />
            <input type="text" placeholder="Descrizione" value={descrizione} onChange={(e) => setDescrizione(e.target.value)} />
            <button onClick={creaAttivita}>Aggiungi Attivit√†</button>

            <ul>
                {attivita.map(att => (
                    <li key={att.ID}>
                        {att.Titolo} - {att.Descrizione}
                        <button onClick={() => eliminaAttivita(att.ID)}>‚ùå</button>
                    </li>
                ))}
            </ul>
        </div>
    );
};

export default Attivita;

‚úÖ Ora React pu√≤ creare ed eliminare attivit√†!
üìå 4. Report e Notifiche

Per le notifiche automatiche, possiamo usare nodemailer per inviare email quando un'attivit√† sta per scadere.

Installa nodemailer:

# cd backend

npm install nodemailer

Aggiungi questo codice in server.js per inviare email:

const nodemailer = require("nodemailer");

const transporter = nodemailer.createTransport({
    service: "gmail",
    auth: { user: "tuo@email.com", pass: "password" }
});

app.post("/api/notifica", (req, res) => {
    const mailOptions = {
        from: "tuo@email.com",
        to: req.body.email,
        subject: "Attivit√† in scadenza",
        text: `L'attivit√† "${req.body.titolo}" sta per scadere!`
    };

    transporter.sendMail(mailOptions, (err) => {
        if (err) return res.status(500).send(err);
        res.json({ message: "Notifica inviata!" });
    });
});

‚úÖ Ora possiamo inviare email per attivit√† in scadenza!
üéØ Conclusione

üîπ CRUD completo per Attivit√†, Magazzini, Materiali
üîπ Login sicuro con bcrypt e JWT
üîπ Report e notifiche email automatiche

üí° Vuoi aggiungere ruoli utente o dashboard grafiche con grafici? Dimmi e lo implementiamo! üöÄ
